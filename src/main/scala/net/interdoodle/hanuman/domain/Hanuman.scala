package net.interdoodle.hanuman.domain

import akka.stm.Ref
import akka.event.EventHandler
import collection.mutable.HashMap
import scala.collection.JavaConversions._
import net.interdoodle.hanuman.message._
import akka.actor.{ActorRef, Actor}


/** Monkey god (supervises Monkey supervisors)
 * @author Mike Slinn */

class Hanuman(val simulationID:String,
              val maxTicks:Int,
              val monkeysPerVisor:Int,
              val document:String,
              val simulationStatusRef:Ref[SimulationStatus]) extends Actor {
  val simulationStatus = simulationStatusRef.get
  val monkeyResultRefMap = new Hanuman.TextMatchRefMap()
  var running = true // is this boolean required or is there a better way?
  var tickNumber = 1

  
  override def postStop() {
    running = false
    for (val monkeyVisorRef <- self.linkedActors.values()) {
      monkeyVisorRef.stop() // monkeyVisor's postStop() also stops linked Monkeys
      self.unlink(monkeyVisorRef)
    }
  }
  override def preStart() {
    createMonkeyVisor()
    while (running && tickNumber<=maxTicks) {
      EventHandler.info(this, "Hanuman tick #" + tickNumber.toString())
      tick() // until this Actor is stopped
      tickNumber += 1
    }
    EventHandler.info(this, "Hanuman reached maximum ticks for simulation")
    for (val monkeyVisor <- self.linkedActors.values())
      monkeyVisor ! "stop"
  }

  def createMonkeyVisor() {
    val monkeyResult = new TextMatch(null, 0, 0, 0)
    val monkeyVisorRef = Actor.actorOf(new MonkeyVisor(simulationID, document, monkeysPerVisor, monkeyResultRefMap, simulationStatusRef))
    simulationStatus.putSimulation(simulationID, Some(monkeyVisorRef))
    self.link(monkeyVisorRef)
    monkeyVisorRef.start()
  }

  def receive = {
    case DocumentMatch(monkeyRef, startIndex) =>
      running = false
      // TODO summarize
      //simulationStatus.put(monkeyRef.uuid, ??)
      simulationStatusRef.set(simulationStatus)
      EventHandler.info(this, "Hanuman is done")

    case SendSimulationStatus(sessionID) =>
      EventHandler.info(this, "TODO send simulation status")

    case "stop" =>
      EventHandler.info(this, "Hanuman received a stop message")
      //simulationStatus.put(monkeyRef.uuid, ??)
      simulationStatusRef.set(simulationStatus)
      running = false

    case "stopped" =>
      EventHandler.info(this, "Hanuman received a 'stopped' message from a MonkeyVisor")
      if (self.linkedActors.size()==0) {
        // TODO summarize this simulation
      }

    case _ =>
      EventHandler.info(this, "Hanuman received an unknown message")
  }

  /** Simulate time slice, wherein a page is generated by each monkey */
  def tick() {
    for (val monkeyVisor <- self.linkedActors.values())
      monkeyVisor ! "generatePages"
  }
}

object Hanuman {
  type Simulations = HashMap[String, Option[ActorRef]]
  type TextMatchMap = HashMap[String, TextMatch]
  type TextMatchRefMap = HashMap[String, Ref[TextMatch]]
}